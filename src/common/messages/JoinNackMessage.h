/// CLASS WAS AUTOGENERATED  - DO NOT MODIFY

#pragma once
#include <sstream>
#include <string>

#include "common/message.h"
#include "common/quizzbot_types.h"

namespace quizzbot {
class JoinNackMessage : public MessageData {
public:
  JoinNackMessage() = default;

  JoinNackMessage(std::string error)
      :

        error_(std::move(error)) {}

  // Default move because the types should be trivials..
  JoinNackMessage(JoinNackMessage &&other) noexcept = default;
  JoinNackMessage &operator=(JoinNackMessage &&other) = default;

  MessageType message_type() override { return MessageType::JOIN_NACK; }

  void unpack(std::string &ss) override {

    size_t offset = 0;

    {
      auto oh = msgpack::unpack(ss.c_str(), ss.size(), offset);
      auto o = oh.get();
      error_ = o.as<std::string>();
    }
  }

  void pack(std::stringstream &ss) override { msgpack::pack(ss, error_); }

  // Then Getters and setters

  void set_error(const std::string &error) { error_ = error; }
  const std::string &error() const { return error_; }

  // double dispatch to avoid casting.
  //  void dispatch(MessageHandler* handler) override {
  //  handler->handle(*this);
  //}

private:
  std::string error_{};
};
}