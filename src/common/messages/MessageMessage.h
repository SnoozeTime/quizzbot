/// CLASS WAS AUTOGENERATED  - DO NOT MODIFY

#pragma once
#include <sstream>
#include <string>

#include "common/message.h"
#include "common/quizzbot_types.h"

namespace quizzbot {
class MessageMessage : public MessageData {
public:
  MessageMessage() = default;

  MessageMessage(std::string msg, std::string from)
      :

        msg_(std::move(msg)),

        from_(std::move(from)) {}

  // Default move because the types should be trivials..
  MessageMessage(MessageMessage &&other) noexcept = default;
  MessageMessage &operator=(MessageMessage &&other) = default;

  MessageType message_type() override { return MessageType::MESSAGE; }

  void unpack(std::string &ss) override {

    size_t offset = 0;

    {
      auto oh = msgpack::unpack(ss.c_str(), ss.size(), offset);
      auto o = oh.get();
      msg_ = o.as<std::string>();
    }

    {
      auto oh = msgpack::unpack(ss.c_str(), ss.size(), offset);
      auto o = oh.get();
      from_ = o.as<std::string>();
    }
  }

  void pack(std::stringstream &ss) override {

    msgpack::pack(ss, msg_);

    msgpack::pack(ss, from_);
  }

  // Then Getters and setters

  void set_msg(const std::string &msg) { msg_ = msg; }
  const std::string &msg() const { return msg_; }

  void set_from(const std::string &from) { from_ = from; }
  const std::string &from() const { return from_; }

  // double dispatch to avoid casting.
  //  void dispatch(MessageHandler* handler) override {
  //  handler->handle(*this);
  //}

private:
  std::string msg_{};

  std::string from_{};
};
}